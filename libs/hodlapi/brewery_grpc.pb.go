// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hodlapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BreweryServiceClient is the client API for BreweryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BreweryServiceClient interface {
	ListBreweries(ctx context.Context, in *Filter, opts ...grpc.CallOption) (BreweryService_ListBreweriesClient, error)
	SearchBreweries(ctx context.Context, in *Filter, opts ...grpc.CallOption) (BreweryService_SearchBreweriesClient, error)
	BreweryCount(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*BreweryCountRespose, error)
}

type breweryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBreweryServiceClient(cc grpc.ClientConnInterface) BreweryServiceClient {
	return &breweryServiceClient{cc}
}

func (c *breweryServiceClient) ListBreweries(ctx context.Context, in *Filter, opts ...grpc.CallOption) (BreweryService_ListBreweriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &BreweryService_ServiceDesc.Streams[0], "/hodlapi.BreweryService/ListBreweries", opts...)
	if err != nil {
		return nil, err
	}
	x := &breweryServiceListBreweriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BreweryService_ListBreweriesClient interface {
	Recv() (*Brewery, error)
	grpc.ClientStream
}

type breweryServiceListBreweriesClient struct {
	grpc.ClientStream
}

func (x *breweryServiceListBreweriesClient) Recv() (*Brewery, error) {
	m := new(Brewery)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *breweryServiceClient) SearchBreweries(ctx context.Context, in *Filter, opts ...grpc.CallOption) (BreweryService_SearchBreweriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &BreweryService_ServiceDesc.Streams[1], "/hodlapi.BreweryService/SearchBreweries", opts...)
	if err != nil {
		return nil, err
	}
	x := &breweryServiceSearchBreweriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BreweryService_SearchBreweriesClient interface {
	Recv() (*Brewery, error)
	grpc.ClientStream
}

type breweryServiceSearchBreweriesClient struct {
	grpc.ClientStream
}

func (x *breweryServiceSearchBreweriesClient) Recv() (*Brewery, error) {
	m := new(Brewery)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *breweryServiceClient) BreweryCount(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*BreweryCountRespose, error) {
	out := new(BreweryCountRespose)
	err := c.cc.Invoke(ctx, "/hodlapi.BreweryService/BreweryCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BreweryServiceServer is the server API for BreweryService service.
// All implementations must embed UnimplementedBreweryServiceServer
// for forward compatibility
type BreweryServiceServer interface {
	ListBreweries(*Filter, BreweryService_ListBreweriesServer) error
	SearchBreweries(*Filter, BreweryService_SearchBreweriesServer) error
	BreweryCount(context.Context, *Filter) (*BreweryCountRespose, error)
	mustEmbedUnimplementedBreweryServiceServer()
}

// UnimplementedBreweryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBreweryServiceServer struct {
}

func (UnimplementedBreweryServiceServer) ListBreweries(*Filter, BreweryService_ListBreweriesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBreweries not implemented")
}
func (UnimplementedBreweryServiceServer) SearchBreweries(*Filter, BreweryService_SearchBreweriesServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchBreweries not implemented")
}
func (UnimplementedBreweryServiceServer) BreweryCount(context.Context, *Filter) (*BreweryCountRespose, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BreweryCount not implemented")
}
func (UnimplementedBreweryServiceServer) mustEmbedUnimplementedBreweryServiceServer() {}

// UnsafeBreweryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BreweryServiceServer will
// result in compilation errors.
type UnsafeBreweryServiceServer interface {
	mustEmbedUnimplementedBreweryServiceServer()
}

func RegisterBreweryServiceServer(s grpc.ServiceRegistrar, srv BreweryServiceServer) {
	s.RegisterService(&BreweryService_ServiceDesc, srv)
}

func _BreweryService_ListBreweries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BreweryServiceServer).ListBreweries(m, &breweryServiceListBreweriesServer{stream})
}

type BreweryService_ListBreweriesServer interface {
	Send(*Brewery) error
	grpc.ServerStream
}

type breweryServiceListBreweriesServer struct {
	grpc.ServerStream
}

func (x *breweryServiceListBreweriesServer) Send(m *Brewery) error {
	return x.ServerStream.SendMsg(m)
}

func _BreweryService_SearchBreweries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BreweryServiceServer).SearchBreweries(m, &breweryServiceSearchBreweriesServer{stream})
}

type BreweryService_SearchBreweriesServer interface {
	Send(*Brewery) error
	grpc.ServerStream
}

type breweryServiceSearchBreweriesServer struct {
	grpc.ServerStream
}

func (x *breweryServiceSearchBreweriesServer) Send(m *Brewery) error {
	return x.ServerStream.SendMsg(m)
}

func _BreweryService_BreweryCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BreweryServiceServer).BreweryCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hodlapi.BreweryService/BreweryCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BreweryServiceServer).BreweryCount(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

// BreweryService_ServiceDesc is the grpc.ServiceDesc for BreweryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BreweryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hodlapi.BreweryService",
	HandlerType: (*BreweryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BreweryCount",
			Handler:    _BreweryService_BreweryCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListBreweries",
			Handler:       _BreweryService_ListBreweries_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchBreweries",
			Handler:       _BreweryService_SearchBreweries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "brewery.proto",
}
